if(!is.null(comboInfo$remove)){
f.x <- x[, -c(nzv,comboInfo$remove)] # filter images
}
else{
f.x <- x[, -c(nzv)]
}
# Transform data
preProcValues <- preProcess(f.x, method=c("center","scale")) # center and scale data
ft.x <- predict(preProcValues, f.x)
# Choose number of features to return based on feat.cap
if(!is.null(feat.cap)){
if(ncol(ft.x) > feat.cap) {
return(ft.x[,1:feat.cap])
}
else{
return(ft.x)
}
}
else{
return(ft.x)
}
}
test.images.trans <- PreProcess(test.images)
train.images.trans <- PreProcess(train.images, feat.cap=ncol(val.images.trans))
train.images.trans <- PreProcess(images, feat.cap=ncol(test.images.trans))
# Normalize training images by dividing each image by l2 norm of its pixel values
train.images.norm <- sapply(1:dim(images)[3],
function(i) images[,,i]/(sqrt(sum(abs(images[,,i])^2))))
train.images.norm <- t(train.images.norm)
test.images.norm <- sapply(1:dim(test.images)[1],
function(i) test.images[i,]/(sqrt(sum(abs(test.images[i,])^2))))
test.images.norm <- t(test.images.norm)
test.images.trans <- PreProcess(test.images.norm)
train.images.trans <- PreProcess(train.images.norm, feat.cap=ncol(test.images.trans))
gauss.model.opt <- naiveBayes(x=train.images.trans,
y=as.factor(labels))
gauss.pred.opt <- predict(gauss.model.opt, test.images.trans)
sum(gauss.pred.opt!=test.labels)/length(test.labels) # calc te
# Output as .csv file
write.csv(data.frame("Id"=1:length(gauss.pred.opt),
"Category"=gauss.pred.opt),
"digits-pred-jason-poulos.csv",
row.names=FALSE,
quote=FALSE)
# Train model and classify test images
gauss.model.opt <- naiveBayes(x=train.images.norm,
y=as.factor(labels))
gauss.pred.opt <- predict(gauss.model.opt, test.images.norm)
sum(gauss.pred.opt!=test.labels)/length(test.labels) # calc test
# Load and preprocess spam data
spam <- readMat(paste0(data.directory,"spam_data.mat"))
# Transform spam training and test sets
PreProcessPCA <- function(x, feat.cap=NULL){
# Preprocess and transform data by centering and scaling the data, and applying PCA.
#
# Args:
#   x: Matrix of features.
#   feat.cap: If specified, the maximum number of PCs in the returning matrix. Default is null.
#
# Returns:
#   Matrix of preprocessed and transformed data, where columns are PCs.
#
# Transform data
preProcValues <- preProcess(x, method=c("center","scale","pca")) # center and scale data and apply PCA
ft.x <- predict(preProcValues, x)
# Choose number of features to return based on feat.cap
if(!is.null(feat.cap)){
if(ncol(ft.x) > feat.cap) {
return(ft.x[,1:feat.cap])
}
else{
return(ft.x)
}
}
else{
return(ft.x)
}
}
test.spam.trans <- PreProcessPCA(spam[["test.data"]]) # transform test set
train.spam.opt <- PreProcessPCA(spam[["training.data"]],
feat.cap=ncol(test.spam.trans)) # transform training set
ncol(test.spam.trans)
adult <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
adult <- subset(adult, -c("fnlwgt","education_num"))
adult <- subset(adult, select=-c("fnlwgt","education_num"))
View(adult)
adult <- subset(adult, select=-c("fnlwgt","education_num"))
?subset
adult <- adult[!colnames %in% c("fnlwgt", "education_num")]
adult <- subset(adult, select=-c(fnlwgt,education_num))
summary(adult)
class(adult)
class(adult$occupation)
adult$type_employer <- as.character(adult$type_employer)
adult$occupation <- as.character(adult$occupation)
adult$country <- as.character(adult$country)
adult$education <- as.character(adult$education)
adult$race <- as.character(adult$race)
adult$marital <- as.character(adult$marital)
# Combine similar occupations
adult$type_employer <- gsub("^Federal-gov","Federal-Govt",adult$type_employer)
adult$type_employer <- gsub("^Local-gov","Other-Govt",adult$type_employer)
adult$type_employer <- gsub("^State-gov","Other-Govt",adult$type_employer)
adult$type_employer <- gsub("^Private","Private",adult$type_employer)
adult$type_employer <- gsub("^Self-emp-inc","Self-Employed",adult$type_employer)
adult$type_employer <- gsub("^Self-emp-not-inc","Self-Employed",adult$type_employer)
adult$type_employer <- gsub("^Without-pay","Not-Working",adult$type_employer)
adult$type_employer <- gsub("^Never-worked","Not-Working",adult$type_employer)
table(adult$type_employer)
# Prepare adult dataset
# Uses code from http://scg.sdsu.edu/dataset-adult_r/
# Load data from UCI repository
adult <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
# Remove weight and education no. variables
adult <- subset(adult, select=-c(fnlwgt,education_num))
# Convert factor to text
adult$type_employer <- as.character(adult$type_employer)
adult$occupation <- as.character(adult$occupation)
adult$country <- as.character(adult$country)
adult$education <- as.character(adult$education)
adult$race <- as.character(adult$race)
adult$marital <- as.character(adult$marital)
table(adult$type_employer)
table(adult$type_employer)
table(adult$occupation)
table(adult$country)
summary(adult)
# Center and scale continuous variables
adult$age <- scale(adult$age, center = TRUE, scale = TRUE)
adult$capital_gain <- scale(adult$capital_gain, center = TRUE, scale = TRUE)
adult$capital_loss <- scale(adult$capital_loss, center = TRUE, scale = TRUE)
adult$hr_per_week <- scale(adult$hr_per_week, center = TRUE, scale = TRUE)
summary(adult)
?Scale
?sclae
?scale
# Prepare adult dataset
# Uses code from http://scg.sdsu.edu/dataset-adult_r/
# Load data from UCI repository
adult <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
# Remove weight and education no. variables
adult <- subset(adult, select=-c(fnlwgt,education_num))
adult <- subset(adult, select=-c(fnlwgt,education_num))
scale(adult$age, center = TRUE, scale = TRUE)
adult$age
class(adult$age )
class(scale(adult$age, center = TRUE, scale = TRUE))
adult$age <- as.numeric(scale(adult$age, center = TRUE, scale = TRUE))
summary(adult)
adult$age <- as.numeric(scale(adult$age, center = TRUE, scale = TRUE))
adult$capital_gain <- as.numeric(scale(adult$capital_gain, center = TRUE, scale = TRUE))
adult$capital_loss <- as.numeric(scale(adult$capital_loss, center = TRUE, scale = TRUE))
adult$hr_per_week <- as.numeric(scale(adult$hr_per_week, center = TRUE, scale = TRUE))
is.na(data)
is.na(adult)
adult=='?'
summary(adult=='?')
summary(adult)
# Missing to NA
is.na(adult) = adult=='?'
is.na(adult) = adult==' ?'
summary(adult)
# Load data from UCI repository
adult <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
# Missing to NA
is.na(adult) = adult=='?'
is.na(adult) = adult==' ?'
# Remove weight and education no. variables
adult <- subset(adult, select=-c(fnlwgt,education_num))
# Center and scale continuous variables
adult$age <- as.numeric(scale(adult$age, center = TRUE, scale = TRUE))
adult$capital_gain <- as.numeric(scale(adult$capital_gain, center = TRUE, scale = TRUE))
adult$capital_loss <- as.numeric(scale(adult$capital_loss, center = TRUE, scale = TRUE))
adult$hr_per_week <- as.numeric(scale(adult$hr_per_week, center = TRUE, scale = TRUE))
summary(adult)
class(adult$income)
adult$income==0
adult$income==1
summary(adult)
adult$income = as.factor(ifelse(adult$income==adult$income[1],0,1))
summary(adult)
# Prepare adult dataset
# Uses code from http://scg.sdsu.edu/dataset-adult_r/
# Load data from UCI repository
adult <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
summary(adult)
# Missing to NA
is.na(adult) = adult=='?'
is.na(adult) = adult==' ?'
summary(adult)
# Remove weight and education no. variables
adult <- subset(adult, select=-c(fnlwgt,education_num))
# Center and scale continuous variables
adult$age <- as.numeric(scale(adult$age, center = TRUE, scale = TRUE))
adult$capital_gain <- as.numeric(scale(adult$capital_gain, center = TRUE, scale = TRUE))
adult$capital_loss <- as.numeric(scale(adult$capital_loss, center = TRUE, scale = TRUE))
adult$hr_per_week <- as.numeric(scale(adult$hr_per_week, center = TRUE, scale = TRUE))
# Make response 0/1
adult$income = as.factor(ifelse(adult$income==adult$income[1],0,1))
summary(adult)
sum(duplicated(adult))
head((adult))
# Missing to NA
is.na(adult) = adult=='?'
is.na(adult) = adult==' ?'
levels(adult$type_employer)
?paste
paste0("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.",set,"data")
PreProcessAdult <- function(adult,set=data){
# Preprocess and transform data by filtering out features and centering and scaling the data.
#
# Args:
#   adult: Dataframe of features and response.
#   set: Training ("data") or test ("test")
#
# Returns:
#   Dataframe of preprocessed data.
# Load data from UCI repository
adult <- read.table(paste0("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.",set,"data"),
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
# Remove technical variables
adult <- subset(adult, select=-c(fnlwgt,education_num))
# Center and scale continuous variables
adult$age <- as.numeric(scale(adult$age, center = TRUE, scale = TRUE))
adult$capital_gain <- as.numeric(scale(adult$capital_gain, center = TRUE, scale = TRUE))
adult$capital_loss <- as.numeric(scale(adult$capital_loss, center = TRUE, scale = TRUE))
adult$hr_per_week <- as.numeric(scale(adult$hr_per_week, center = TRUE, scale = TRUE))
# Make response 0/1
adult$income = as.factor(ifelse(adult$income==adult$income[1],0,1))
return(adult)
}
PreProcessAdult <- function(set){
# Load and preprocess UCI Adult data.
#
# Args:
#   adult: Dataframe of features and response.
#   set: Training ("data") or test ("test")
#
# Returns:
#   Dataframe of preprocessed data.
# Load data from UCI repository
adult <- read.table(paste0("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.",set,"data"),
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
# Remove technical variables
adult <- subset(adult, select=-c(fnlwgt,education_num))
# Center and scale continuous variables
adult$age <- as.numeric(scale(adult$age, center = TRUE, scale = TRUE))
adult$capital_gain <- as.numeric(scale(adult$capital_gain, center = TRUE, scale = TRUE))
adult$capital_loss <- as.numeric(scale(adult$capital_loss, center = TRUE, scale = TRUE))
adult$hr_per_week <- as.numeric(scale(adult$hr_per_week, center = TRUE, scale = TRUE))
# Make response 0/1
adult$income = as.factor(ifelse(adult$income==adult$income[1],0,1))
return(adult)
}
# Training data
adult.train <- PreProcessAdult(set=data)
adult.train <- PreProcessAdult(set="data")
# Prepare adult dataset
# Uses code from http://scg.sdsu.edu/dataset-adult_r/
PreProcessAdult <- function(set){
# Load and preprocess UCI Adult data.
#
# Args:
#   adult: Dataframe of features and response.
#   set: Training ("data") or test ("test")
#
# Returns:
#   Dataframe of preprocessed data.
# Load data from UCI repository
adult <- read.table(paste0("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.",set),
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
# Remove technical variables
adult <- subset(adult, select=-c(fnlwgt,education_num))
# Center and scale continuous variables
adult$age <- as.numeric(scale(adult$age, center = TRUE, scale = TRUE))
adult$capital_gain <- as.numeric(scale(adult$capital_gain, center = TRUE, scale = TRUE))
adult$capital_loss <- as.numeric(scale(adult$capital_loss, center = TRUE, scale = TRUE))
adult$hr_per_week <- as.numeric(scale(adult$hr_per_week, center = TRUE, scale = TRUE))
# Make response 0/1
adult$income = as.factor(ifelse(adult$income==adult$income[1],0,1))
return(adult)
}
# Training data
adult.train <- PreProcessAdult(set="data")
adult.test <- PreProcessAdult(set="test")
read.table(paste0("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.",test),
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income")
read.table(paste0("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.","test"),
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income")
read.table(paste0("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.","test"),
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
load("~/Dropbox/github/cs289-project/uci-adult/adult.test")
?read.table
adult.test <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T,skip=1)
# Load data from UCI repository
adult.train <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
adult.test <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.test",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T,skip=1)
# Prepare adult dataset
# Uses code from http://scg.sdsu.edu/dataset-adult_r/
# Load data from UCI repository
adult.train <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
adult.test <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.test",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T,skip=1)
PreProcessAdult <- function(adult){
# Preprocess UCI Adult data.
#
# Args:
#   adult: Dataframe of features and response.
#
# Returns:
#   Dataframe of preprocessed data.
# Remove technical variables
adult <- subset(adult, select=-c(fnlwgt,education_num))
# Center and scale continuous variables
adult$age <- as.numeric(scale(adult$age, center = TRUE, scale = TRUE))
adult$capital_gain <- as.numeric(scale(adult$capital_gain, center = TRUE, scale = TRUE))
adult$capital_loss <- as.numeric(scale(adult$capital_loss, center = TRUE, scale = TRUE))
adult$hr_per_week <- as.numeric(scale(adult$hr_per_week, center = TRUE, scale = TRUE))
# Make response 0/1
adult$income = as.factor(ifelse(adult$income==adult$income[1],0,1))
return(adult)
}
# Preprocess and export data
adult.train <- PreProcessAdult(adult.train)
adult.test <- PreProcessAdult(adult.test)
# Prepare adult dataset
# Uses code from http://scg.sdsu.edu/dataset-adult_r/
# Load data from UCI repository
adult.train <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
adult.test <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.test",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T,skip=1)
PreProcessAdult <- function(data){
# Preprocess UCI Adult data.
#
# Args:
#   data: Dataframe of features and response.
#
# Returns:
#   Dataframe of preprocessed data.
# Remove technical variables
data <- subset(data, select=-c(fnlwgt,education_num))
# ? to NA
is.na(data) = data=='?'
is.na(data) = data==' ?'
# Center and scale continuous variables
data$age <- as.numeric(scale(data$age, center = TRUE, scale = TRUE))
data$capital_gain <- as.numeric(scale(data$capital_gain, center = TRUE, scale = TRUE))
data$capital_loss <- as.numeric(scale(data$capital_loss, center = TRUE, scale = TRUE))
data$hr_per_week <- as.numeric(scale(data$hr_per_week, center = TRUE, scale = TRUE))
# Make response 0/1
data$income = as.factor(ifelse(data$income==data$income[1],0,1))
return(data)
}
# Preprocess and export data
adult.train <- PreProcessAdult(adult.train)
summary(adult.train)
setwd("~/Dropbox/github/cs289-project")
write.table(adult.train,"adult-train.csv")
adult.train <- read.csv("~/Dropbox/github/cs289-project/adult-train.csv", sep="")
View(adult.train)
summary(adult.train)
summary(adult.train$occupation)
# Prepare adult dataset
# Uses code from http://scg.sdsu.edu/dataset-adult_r/
# Load data from UCI repository
adult.train <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
adult.test <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.test",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T,skip=1)
PreProcessAdult <- function(data){
# Preprocess UCI Adult data.
#
# Args:
#   data: Dataframe of features and response.
#
# Returns:
#   Dataframe of preprocessed data.
# Remove technical variables
data <- subset(data, select=-c(fnlwgt,education_num))
# ? to NA
is.na(data) = data=='?'
is.na(data) = data==' ?'
# Center and scale continuous variables
data$age <- as.numeric(scale(data$age, center = TRUE, scale = TRUE))
data$capital_gain <- as.numeric(scale(data$capital_gain, center = TRUE, scale = TRUE))
data$capital_loss <- as.numeric(scale(data$capital_loss, center = TRUE, scale = TRUE))
data$hr_per_week <- as.numeric(scale(data$hr_per_week, center = TRUE, scale = TRUE))
# Make response 0/1
data$income = as.factor(ifelse(data$income==data$income[1],0,1))
return(data)
}
# Preprocess and export data
adult.train <- PreProcessAdult(adult.train)
write.table(adult.train,"adult-train.csv")
adult.test <- PreProcessAdult(adult.test)
write.table(adult.train,"adult-test.csv")
View(adult.test)
summary(adult.test)
adult.train <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
summary(adult.train)
# Prepare adult dataset
# Uses code from http://scg.sdsu.edu/dataset-adult_r/
# Load data from UCI repository
adult.train <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
adult.test <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.test",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T,skip=1)
PreProcessAdult <- function(data){
# Preprocess UCI Adult data.
#
# Args:
#   data: Dataframe of features and response.
#
# Returns:
#   Dataframe of preprocessed data.
# Remove technical variables
data <- subset(data, select=-c(fnlwgt,education_num))
# ? to NA
is.na(data) = data=='?'
is.na(data) = data==' ?'
# Center and scale continuous variables
data$age <- as.numeric(scale(data$age, center = TRUE, scale = TRUE))
data$capital_gain <- as.numeric(scale(data$capital_gain, center = TRUE, scale = TRUE))
data$capital_loss <- as.numeric(scale(data$capital_loss, center = TRUE, scale = TRUE))
data$hr_per_week <- as.numeric(scale(data$hr_per_week, center = TRUE, scale = TRUE))
# Make response 0/1
data$income = as.factor(ifelse(data$income==data$income[1],0,1))
return(data)
}
# Preprocess and export data
adult.train <- PreProcessAdult(adult.train)
write.table(adult.train,"adult-train.csv")
adult.test <- PreProcessAdult(adult.test)
write.table(adult.train,"adult-test.csv")
